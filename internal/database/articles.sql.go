// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: articles.sql

package database

import (
	"context"

	"github.com/sqlc-dev/pqtype"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (slug, author, content) VALUES ($1, $2, $3) RETURNING id, slug, author, content, created_at, updated_at, deleted_at
`

type CreateArticleParams struct {
	Slug    string
	Author  string
	Content pqtype.NullRawMessage
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle, arg.Slug, arg.Author, arg.Content)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllArticles = `-- name: ListAllArticles :many
SELECT id, slug, author, content, created_at, updated_at, deleted_at FROM articles ORDER BY $1 OFFSET $2 LIMIT $3
`

type ListAllArticlesParams struct {
	Column1 interface{}
	Offset  int32
	Limit   int32
}

func (q *Queries) ListAllArticles(ctx context.Context, arg ListAllArticlesParams) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listAllArticles, arg.Column1, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticleBySlug = `-- name: ListArticleBySlug :one
SELECT id, slug, author, content, created_at, updated_at, deleted_at FROM articles WHERE slug LIKE $1
`

func (q *Queries) ListArticleBySlug(ctx context.Context, slug string) (Article, error) {
	row := q.db.QueryRowContext(ctx, listArticleBySlug, slug)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
